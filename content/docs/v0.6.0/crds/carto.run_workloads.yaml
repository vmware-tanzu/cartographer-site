---
apiVersion: carto.run/v1alpha1
kind: Workload
metadata: {}
spec:

  # Build configuration, for the build resources in the supply
  # chain
  # +optional
  build:

    # Env is an array of environment variables to propagate to
    # build resources in the supply chain. See
    # https://kubernetes.io/docs/tasks/inject-data-application/environment-variable-expose-pod-information/
    # +optional
    env:
      - # EnvVar represents an environment variable present in a
        # Container.
        # +optional
        name: <string>
        value: <string>
        valueFrom: {}

  # Environment variables to be passed to the main container
  # running the application. See
  # https://kubernetes.io/docs/tasks/inject-data-application/environment-variable-expose-pod-information/
  # +optional
  env:
    - # EnvVar represents an environment variable present in a
      # Container.
      # +optional
      name: <string>
      value: <string>
      valueFrom: {}

  # Image refers to a pre-built image in a registry. It is an
  # alternative to specifying the location of source code for the
  # workload. Specify one of `spec.source` or `spec.image`.
  # +optional
  image: <string>

  # Additional parameters. See:
  # https://cartographer.sh/docs/latest/architecture/#parameter-hierarchy
  # +optional
  params:
    - # Name of the parameter. Should match a blueprint or
      # template parameter name.
      name: <string>

      # Value of the parameter.
      value: <any>

  # Resource constraints for the application. See
  # https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
  # +optional
  resources:
    limits: {}
    requests: {}

  # ServiceAccountName refers to the Service account with
  # permissions to create resources submitted by the supply chain.
  # If not set, Cartographer will use serviceAccountName from
  # supply chain. 
  # If that is also not set, Cartographer will use the default
  # service account in the workload's namespace.
  # +optional
  serviceAccountName: <string>

  # ServiceClaims to be bound through ServiceBindings.
  # +optional
  serviceClaims:
    - name: <string>
      ref:
        apiVersion: <string>
        kind: <string>
        name: <string>

  # The location of the source code for the workload. Specify one
  # of `spec.source` or `spec.image`
  # +optional
  source:

    # Source code location in a git repository.
    # +optional
    git:
      ref:
        branch: <string>
        commit: <string>
        tag: <string>
      url: <string>

    # OCI Image in a repository, containing the source code to be
    # used throughout the supply chain.
    # +optional
    image: <string>

    # Subpath inside the Git repository or Image to treat as the
    # root of the application. Defaults to the root if left empty.
    # +optional
    subPath: <string>

# Status conforms to the Kubernetes conventions:
# https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#typical-status-properties
# +optional
status:

  # Conditions describing this resource's reconcile state. The top
  # level condition is of type `Ready`, and follows these
  # Kubernetes conventions:
  # https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#typical-status-properties
  # +optional
  conditions:
    - # Condition contains details for one aspect of the current
      # state of this API Resource. --- This struct is intended
      # for direct use as an array at the field path
      # .status.conditions.  For example, 
      # type FooStatus struct{ // Represents the observations of a
      # foo's current state. // Known .status.conditions.type are:
      # "Available", "Progressing", and "Degraded" //
      # +patchMergeKey=type // +patchStrategy=merge //
      # +listType=map // +listMapKey=type Conditions
      # []metav1.Condition `json:"conditions,omitempty"
      # patchStrategy:"merge" patchMergeKey:"type"
      # protobuf:"bytes,1,rep,name=conditions"` 
      # // other fields }
      # +optional

  # ObservedGeneration refers to the metadata.Generation of the
  # spec that resulted in the current `status`.
  # +optional
  observedGeneration: <integer>

  # Resources contain references to the objects created by the
  # Supply Chain and the templates used to create them. It also
  # contains Inputs and Outputs that were passed between the
  # templates as the Supply Chain was processed.
  # +optional
  resources:
    - # Conditions describing this resource's reconcile state. The
      # top level condition is of type `Ready`, and follows these
      # Kubernetes conventions:
      # https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#typical-status-properties
      # +optional
      conditions:
        - # Condition contains details for one aspect of the
          # current state of this API Resource. --- This struct is
          # intended for direct use as an array at the field path
          # .status.conditions.  For example, 
          # type FooStatus struct{ // Represents the observations
          # of a foo's current state. // Known
          # .status.conditions.type are: "Available",
          # "Progressing", and "Degraded" // +patchMergeKey=type
          # // +patchStrategy=merge // +listType=map //
          # +listMapKey=type Conditions []metav1.Condition
          # `json:"conditions,omitempty" patchStrategy:"merge"
          # patchMergeKey:"type"
          # protobuf:"bytes,1,rep,name=conditions"` 
          # // other fields }
          # +optional

      # Inputs are references to resources that were used to
      # template the object in StampedRef
      # +optional
      inputs:
        - # Name is the name of the resource in the blueprint
          # whose output the resource consumes as an input
          name: <string>

      # Name is the name of the resource in the blueprint
      name: <string>

      # Outputs are values from the object in StampedRef that can
      # be consumed by other resources
      # +optional
      outputs:
        - # Digest is a sha256 of the full value of the output
          digest: <string>

          # LastTransitionTime is a timestamp of the last time the
          # value changed
          lastTransitionTime: <string>

          # Name is the output type generated from the resource
          # [url, revision, image or config]
          name: <string>

          # Preview is a preview of the value of the output
          preview: <string>

      # StampedRef is a reference to the object that was created
      # by the resource
      # +optional
      stampedRef: {}

      # TemplateRef is a reference to the template used to create
      # the object in StampedRef
      # +optional
      templateRef: {}

  # SupplyChainRef is the Supply Chain resource that was used when
  # this status was set.
  # +optional
  supplyChainRef:
    apiVersion: <string>
    kind: <string>
    name: <string>
    namespace: <string>
